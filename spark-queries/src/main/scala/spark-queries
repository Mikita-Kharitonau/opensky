a. Get number of partitions for 1-hour dataset

scala> val rdd = sc.textFile("file:///home/kharivitalij/Projects/opensky/opensky-data-2019-08-27/11/*")
rdd: org.apache.spark.rdd.RDD[String] = file:///home/kharivitalij/Projects/opensky/opensky-data-2019-08-27/11/* MapPartitionsRDD[20] at textFile at <console>:24

scala> rdd.count
res15: Long = 506999

scala> rdd.getNumPartitions
res16: Int = 4

b. Calculate average latitude and minimum longitude for each origin _country

scala> val df = spark.read.format("csv").load("file:///home/kharivitalij/Projects/opensky/opensky-data-2019-08-27/11/*")
df: org.apache.spark.sql.DataFrame = [_c0: string, _c1: string ... 16 more fields]

df.groupBy("_c3").agg(avg("_c7")).show(1000, false)
df.groupBy("_c3").agg(min("_c6")).show(1000, false)

c. Get the max speed ever seen for the last 4 hours

scala> df.filter($"_c0" > System.currentTimeMillis / 1000 - 4 * 3600).agg(max("_c10")).show
+---------+
|max(_c10)|
+---------+
|     None|
+---------+

d. Get top 10 airplanes with max average speed for the last 4 hours (round the result)

scala> df.filter($"_c0" > System.currentTimeMillis / 1000 - 4 * 3600).groupBy("_c1").agg(avg("_c10")).sort($"avg(_c10)".desc).limit(10).show
+-------+------------------+
|    _c1|         avg(_c10)|
+-------+------------------+
| 76ceea| 311.8440425531915|
| 7c77fc|301.69956521739124|
| 780212|         299.43775|
| 896454| 298.1985263157895|
| 7c7ab8| 297.9486315789473|
| a1cdd8|297.56747368421054|
| 7809df| 297.1104210526316|
| 06a2c5|294.76105263157893|
| c0174d|291.74842105263156|
| 86eee4| 289.9571578947369|
+-------+------------------+


e. Show distinct airplanes where origin_country = ‘Germany’ and it was on ground at least one time during last 4 hours.

scala> df.filter($"_c0" > System.currentTimeMillis / 1000 - 4 * 3600).filter(row => row.get(3) == " Germany" && row.get(9) == " True").select("_c1").distinct.show
+-------+
|    _c1|
+-------+
| 3c4dcd|
| 3ce3b3|
| 3c6502|
| 3c0caa|
| 3ea541|
| 3c42ef|
| 3e3f1f|
| 3c65a6|
| 3c7062|
| 3c66ab|
| 3c4347|
| 3c4a8b|
| 3c433e|
| 3c648b|
| 3c68b4|
| 3c6648|
| 3c409c|
| 3c56e6|
| 3c6468|
| 3c4ad4|
+-------+
only showing top 20 rows

f. Show top 10 origin_country with the highest number of unique airplanes in air for the last day

scala> df.filter($"_c0" > System.currentTimeMillis / 1000 - 24 * 3600 && $"_c9" === " False").groupBy("_c3").count.sort($"count".desc).limit(10).show
+--------------------+-----+
|                 _c3|count|
+--------------------+-----+
|       United States|66822|
|      United Kingdom|51268|
|             Ireland|31431|
|             Germany|29174|
|               China|22898|
|           Australia|17820|
|              Turkey|16341|
|              France|14834|
|             Austria|13296|
| Kingdom of the N...|12016|
+--------------------+-----+

g. Show top 10 longest (by time) completed flights for the last day
h. Get the average geo_altitude value for each origin_country(round the result to 3 decimal places and rename column)

scala> df.groupBy("_c3").agg(round(avg("_c14"), 3)).withColumnRenamed("round(avg(_c14), 3)", "avg_geo_altitude").show
+--------------------+----------------+
|                 _c3|avg_geo_altitude|
+--------------------+----------------+
|             Tunisia|       10690.272|
|          Luxembourg|         8181.61|
|             Ireland|        8734.024|
|               Kenya|       12645.118|
|              Cyprus|       11747.446|
|          Tajikistan|       10582.335|
|              Panama|        9144.686|
|          Kazakhstan|        8841.439|
|              Taiwan|        5675.802|
|             Croatia|        5636.196|
|             Lebanon|       10765.134|
|          Bangladesh|       10460.479|
|           Australia|        4943.784|
|              Israel|       10418.544|
| Libyan Arab Jama...|        9395.582|
|             Albania|       10047.732|
|               Japan|        7134.109|
|            Slovenia|        7521.244|
|             Denmark|        7100.096|
|              Canada|        9797.551|
+--------------------+----------------+
only showing top 20 rows
